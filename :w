#ifndef NodePatchObjectFunctionBase_h
#define NodePatchObjectFunctionBase_h

/*
 * 文件: 优化过程中函数对象的基类
*/

#include <map>
#include <memory>
#include <vector>

namespace WHYSC{
namespace Mesh{

template<typename Mesh>
class NodePatchObjectFunctionBase
{
public:
  typedef typename Mesh::Node Node;
  typedef typename Mesh::Vector Vector;

public:
  NodePatchObjectFunctionBase(const std::shared_ptr<Mesh> mesh): 
    m_mesh(mesh), m_nid(0){}

  virtual double value(Node * node); 
  /* 
   * 当 m_nid 的位置为 node 时, patch 的质量
   */

  virtual Vector gradient(){}; 

  std::shared_ptr<Mesh> get_mesh() {return m_mesh;}

  void set_node_id(int i) {m_nid = i;} //设置要计算的 patch

  int get_node_id() {return m_nid;}

private:
  int m_nid;
  std::shared_ptr<Mesh> m_mesh;
};




};//end of Mesh
};//end of WHYSC

#endif // end of NodePatchObjectFunctionBase_h
